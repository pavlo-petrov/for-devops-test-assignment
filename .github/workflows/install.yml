name: wordpress

on:
  push:
    branches: [ "main" ]
      
  workflow_dispatch:

env: 
  cloud_region: eu-west-1
  packer-file: ./packer/wordpress.pkr.hcl
  ami-prefics: wordpress-prod-
  docker-file: ./docker/Dockerfile
  terraform-file: ./terraform

jobs:
################################# docker front part ##################################
  build_docker_wordpress:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        run: |
          docker build -t footballaws2/wordpress -f ${{ env.docker-file }} .
          docker push footballaws2/wordpress


################################# packer ##################################
  packer_build:
    needs: build_docker_wordpress
    runs-on: ubuntu-latest
    outputs:
      AMI_CURRUNT_NAME_GLOB: ${{ steps.ami_step.outputs.AMI_CURRUNT_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Packer
        uses: hashicorp/setup-packer@v3.1.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.cloud_region }}

      - name: Set up Terraform 1.8.5
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Initialize Terraform
        run: cd ${{ env.terraform-file }} && terraform init
  
      - name: Apply Terraform
        run: cd ${{ env.terraform-file }} && terraform output
        
      - id: terraform_outputs
        name: Get Terraform Outputs
        run: |
          cd ${{ env.terraform-file }}
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
          echo "redis_endpoint=$(terraform output -raw redis_endpoint)" >> $GITHUB_ENV
          echo "redis_port=$(terraform output -raw redis_port)" >> $GITHUB_ENV
          echo "admin_subnet_ids=$(terraform output -raw admin_subnet_ids_for_packer)" >> $GITHUB_ENV
          echo "security_group_for_parcker=$(terraform output -raw secutity_group_packer_id)" >> $GITHUB_ENV
          echo "iam_profile_for_s3=$(terraform output -raw iam_profile_for_s3)" >> $GITHUB_ENV
          echo "AWS_S3_WORDPRESS_NAME_S3=$(terraform output -raw AWS_S3_WORDPRESS_NAME_S3)" >> $GITHUB_ENV
      
      - name: Retrieve Docker Hub credentials from AWS Secrets Manager
        run: |
          echo "Retrieving secrets from AWS Secrets Manager..."
          DOCKER_HUB_USERNAME=$(aws secretsmanager get-secret-value --secret-id test_mysql_pass --query SecretString --output text | jq -r '.DOCKER_HUB_USERNAME')
          echo "::add-mask::$DOCKER_HUB_USERNAME"
          DOCKER_HUB_ACCESS_TOKEN=$(aws secretsmanager get-secret-value --secret-id test_mysql_pass --query SecretString --output text | jq -r '.DOCKER_HUB_ACCESS_TOKEN')
          echo "::add-mask::$DOCKER_HUB_ACCESS_TOKEN"
          WORDPRESS_DB_PASSWD=$(aws secretsmanager get-secret-value --secret-id test_mysql_pass --query SecretString --output text | jq -r '.password_for_mysql')
          echo "::add-mask::$WORDPRESS_DB_PASSWD"
          echo "DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_HUB_ACCESS_TOKEN=$DOCKER_HUB_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "WORDPRESS_DB_PASSWD=$WORDPRESS_DB_PASSWD" >> $GITHUB_ENV
          

      - id: ami_step
        name: Set ami ID 
        run: |
          timeline="$(date +'%Y%m%d%H%M%S')"
          AMI_CURRUNT_NAME="${{ env.ami-prefics }}$timeline"
          echo "AMI_CURRUNT_NAME=$AMI_CURRUNT_NAME" >> $GITHUB_ENV
          echo "AMI_CURRUNT_NAME=$AMI_CURRUNT_NAME" >> $GITHUB_OUTPUT

      - name: Run Packer
        run: |
          echo "AMI_CURRUNT_NAME=$AMI_CURRUNT_NAME" >> $GITHUB_ENV
          packer init ${{ env.packer-file }}
          packer build -var "vpc_id=${{ secrets.vpc_id }}" \
              -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
              -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -var "rds_endpoint=${{ env.rds_endpoint }}" \
              -var "redis_endpoint=${{ env.redis_endpoint }}" \
              -var "redis_port=${{ env.redis_port }}" \
              -var "aws_region=${{ env.cloud_region }}" \
              -var "admin_subnet_ids"=${{  env.admin_subnet_ids }} \
              -var "security_group_for_parcker"=${{ env.security_group_for_parcker }} \
              -var "DOCKER_HUB_ACCESS_TOKEN"=${{ env.DOCKER_HUB_ACCESS_TOKEN }} \
              -var "DOCKER_HUB_USERNAME"=${{ env.DOCKER_HUB_USERNAME }} \
              -var "wordpress_db_passwd"=${{ env.WORDPRESS_DB_PASSWD }} \
              -var "AMI_CURRUNT_NAME"=${{ env.AMI_CURRUNT_NAME }} \
              -var "iam_profile_for_s3"=${{ env.iam_profile_for_s3 }} \
              -var "AWS_S3_WORDPRESS_NAME_S3"=${{ env.AWS_S3_WORDPRESS_NAME_S3 }} \
              ${{ env.packer-file }}

###################### deploy ###################              
  deploy:
    needs: packer_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Packer
        uses: hashicorp/setup-packer@v3.1.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.cloud_region }}

      - name: Set up Terraform 1.8.5
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Initialize Terraform
        run: cd ${{ env.terraform-file }} && terraform init
  
      - name: Apply Terraform
        run: cd ${{ env.terraform-file }} && terraform output
        
      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          cd ${{ env.terraform-file }}
          echo "asg_name_admin_id=$(terraform output -raw asg_name_admin_id)" >> $GITHUB_ENV
          echo "asg_name_public_id=$(terraform output -raw asg_name_public_id)" >> $GITHUB_ENV
          echo "listener_admin_arn=$(terraform output -raw listener_admin_arn)" >> $GITHUB_ENV
          echo "listener_public_arn=$(terraform output -raw listener_public_arn)" >> $GITHUB_ENV
          echo "launch_template_public_id=$(terraform output -raw launch_template_public_id)" >> $GITHUB_ENV
          echo "launch_template_admin_id=$(terraform output -raw launch_template_admin_id)" >> $GITHUB_ENV

      - name: Update Admin Auto Scaling Group with new AMI
        env:
          AMI_NAME: ${{ needs.packer_build.outputs.AMI_CURRUNT_NAME_GLOB }}
          LAUNCH_TEMPLATE_ID: ${{ env.launch_template_admin_id }}
          ASG_NAME: ${{ env.asg_name_admin_id }}
        run: |
          echo "start new_version"
          echo $AMI_NAME
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=$AMI_NAME" --query "Images[0].ImageId" --output text)
          echo $LAUNCH_TEMPLATE_ID
          echo $ASG_NAME
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          aws ec2 modify-launch-template \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --default-version $NEW_VERSION

          echo "start update" 

          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template "LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION" \
          --min-size 1 \
          --max-size 2 \
          --desired-capacity 1 \
          --termination-policies "OldestInstance"

      - name: Trigger Instance Refresh for Admin ASG
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ env.asg_name_admin_id }} \
          --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}'

      - name: Update Public Auto Scaling Group with new AMI
        env:
          AMI_NAME: ${{ needs.packer_build.outputs.AMI_CURRUNT_NAME_GLOB }}
          LAUNCH_TEMPLATE_ID: ${{ env.launch_template_public_id }}
          ASG_NAME: ${{ env.asg_name_public_id }}
        run: |
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=$AMI_NAME" --query "Images[0].ImageId" --output text)

          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version 1 \
            --launch-template-data "ersion.VersionNumber' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          aws ec2 modify-launch-template \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --default-version $NEW_VERSION

          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template "LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION" \
          --min-size 1 \
          --max-size 2 \
          --desired-capacity 1 \
          --termination-policies "OldestInstance"

      - name: Trigger Instance Refresh for Public ASG
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ env.asg_name_public_id }} \
          --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}'
